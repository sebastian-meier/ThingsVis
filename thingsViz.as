package{		import com.jeremyrodgers.dd_tile_list;		//Basics	import flash.display.MovieClip;	import flash.display.DisplayObject;	import flash.display.Sprite;	import flash.geom.Rectangle;	import fl.motion.Color;	//Printing	import flash.printing.PrintJob;	import flash.printing.PrintJobOptions;    import flash.printing.PrintJobOrientation;	import flash.display.Bitmap;		//Text	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import flash.text.AntiAliasType;	//Components	import fl.controls.ComboBox;	import fl.controls.TileList;	import fl.controls.ScrollBarDirection;	import fl.core.UIComponent;	import fl.controls.listClasses.CellRenderer;	import fl.controls.Button;	import fl.controls.Slider;	import fl.controls.ColorPicker;	import fl.containers.ScrollPane;	//Events	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.Event;	import fl.events.ColorPickerEvent;	import flash.xml.*;	import flash.net.URLLoader;	import flash.net.URLRequest;		import flash.utils.getDefinitionByName;	import flash.utils.getQualifiedClassName;	import flash.utils.getQualifiedSuperclassName;		import flash.utils.getDefinitionByName;	public class thingsViz extends MovieClip{			[SWF(width='1024', height='768', backgroundColor='0x26202B', frameRate='40')]		[Embed(mimeType='application/x-font', source='fonts/Arial.ttf', fontName='Arial')]		public var Arial:Class;				[Embed(mimeType='application/x-font', source='fonts/Arial Bold.ttf', fontName='Arial', fontWeight='bold')]		public var ArialBold:Class;		public var overallContainer:MovieClip = new MovieClip();		public var toDoContainer;		public var toDoPane:ScrollPane;		public var xmlData:XML;		public var xmlArray:Array = new Array();		public var areas:ComboBox;		public var projects:ComboBox;		public var projectTags:TileList;		public var selectedProjectTags:TileList;		public var zoom:Slider;		public var processProject:Number = 0;		public var processArea:Number = 0;		public var processStep:Number = 0;		public var process:Boolean = false;		public var statusField:TextField;		public var projectCount:Number = 0;		public var areaCount:Number = 0;		public var tagArray:Array = new Array();		public var currentToDoArray:Array;		public var updateButton:Button;		public var printButton:Button;		public var menu:MovieClip;		public var startDate:Number;		public var endDate:Number;		public var monthArray:Array = new Array("", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");		public var settings:Object = {'monthWidth':100, 'border':10, 'toDoWidth':80};		public var stdTextFormat:TextFormat = new TextFormat("Arial", 10, 0x000000, false, false, false, null, null, 'left');		public var colorArray:Array = new Array();		public var printContainer:MovieClip = new MovieClip();				public function thingsViz():void{			stage.scaleMode = "noScale";			stage.align = "TL";			stage.showDefaultContextMenu = false;						printContainer.visible = false;			this.addChild(printContainer);						menu = new MovieClip();			menu.name = "menu";			menu.x = 0;			menu.y = 0;			menu.visible = false;						areas = new ComboBox();			areas.name = "areas";			areas.x = 10;			areas.y = 10;			areas.width = 150;			areas.addEventListener(Event.CHANGE, areaChange);			menu.addChild(areas);						projects = new ComboBox();			projects.name = "projects";			projects.x = 180;			projects.y = 10;			projects.width = 150;			projects.addEventListener(Event.CHANGE, projectChange);			menu.addChild(projects);						projectTags = new dd_tile_list();			projectTags.name = 'projectTags';			projectTags.x = 350;			projectTags.y = 10;			projectTags.columnCount = 1;			projectTags.columnWidth = 150;			projectTags.rowHeight = 25;			projectTags.setStyle("cellRenderer", CustomCellRenderer);			projectTags.setSize(150, 100);			projectTags.direction = ScrollBarDirection.VERTICAL;			menu.addChild(projectTags);						selectedProjectTags = new dd_tile_list();			selectedProjectTags.name = 'selectedProjectTags';			selectedProjectTags.x = 520;			selectedProjectTags.y = 10;			selectedProjectTags.columnCount = 1;			selectedProjectTags.columnWidth = 150;			selectedProjectTags.rowHeight = 25;			selectedProjectTags.setStyle("cellRenderer", CustomCellRenderer);			selectedProjectTags.setSize(150, 100);			selectedProjectTags.direction = ScrollBarDirection.VERTICAL;			selectedProjectTags.addEventListener(dd_tile_list.ITEM_ADDED, projectTagAdded);			selectedProjectTags.addEventListener(dd_tile_list.ITEM_REMOVED, projectTagRemoved);			selectedProjectTags.addEventListener(dd_tile_list.LIST_REORDERED, projectTagReordered);			menu.addChild(selectedProjectTags);						updateButton = new Button();			updateButton.name = 'updateButton';			updateButton.x = 690;			updateButton.y = 10;			updateButton.width = 80;			updateButton.label = "update";			updateButton.addEventListener(MouseEvent.CLICK, updateButtonClick);			menu.addChild(updateButton);						printButton = new Button();			printButton.name = 'printButton';			printButton.x = 890;			printButton.y = 10;			printButton.width = 80;			printButton.label = "print";			printButton.addEventListener(MouseEvent.CLICK, printButtonClick);			menu.addChild(printButton);						zoom = new Slider();			zoom.name = 'zoom';			zoom.x = 790;			zoom.y = 10;			zoom.width = 80;			zoom.minimum = 1;			zoom.maximum = 10;			zoom.value = 1;			menu.addChild(zoom);						overallContainer.addChild(menu);			statusField = stdTextField();			statusField.name = 'statusField';			statusField.x = 10;			statusField.y = 10;			statusField.width = 400;						overallContainer.addChild(statusField);						var empty_mc:MovieClip = new MovieClip();			toDoPane = new ScrollPane();			toDoPane.x = 0;			toDoPane.y = 220;			toDoPane.width = stage.stageWidth;			toDoPane.height = stage.stageHeight-220;			toDoPane.source = empty_mc;			toDoContainer = toDoPane.content;						overallContainer.addChild(toDoPane);			addChild(overallContainer);			init();						stage.addEventListener(Event.RESIZE, sizeChange);		}				public function objectById(id:String):XML{			var returnNode:XML;			for each(var object in xmlData.object){				if(object.attribute('id') == id){					returnNode = object;				}			}			return returnNode;		}				public function objectByName(name:String):XML{			var returnNode:XML;			for each(var object in xmlData.object){				for each(var attribute in object.attribute){					if((attribute.attribute('name') == 'identifier') && (attribute.text() == name)){						returnNode = object;					}				}			}			return returnNode;		}				public function getAttribute(node:XML, attribute_find:String, type:String):String{			var attributeValue:String;			var search;			if(type=='attribute'){				search = node.attribute;			}else{				search = node.relationship;			}			for each(var attribute in search){				if((attribute.attribute('name') == attribute_find)){					if(attribute_find == 'tags'){						attributeValue = attribute.attribute('idrefs');					}else{						attributeValue = attribute.text();					}				}			}			return attributeValue;		}				public function getChildren(node:XML):Array{			var xmlNodes:Array = new Array();			var childrens:String;			var childrensArray:Array;			var searchFor:String;			if((node.attribute('type') == 'FOCUS') && (getAttribute(node, 'identifier', 'attribute') != 'FocusLevelsHeading')){				searchFor = 'focustodos';			}else{				searchFor = 'children';			}			for each(var relationship in node.relationship){				if((relationship.attribute('name') == searchFor)){					childrens = relationship.attribute('idrefs');					childrensArray = childrens.split(' ');					for each(var child in childrensArray){						if((child != null)&&(child != ' ')&&(child != '')){							xmlNodes.push(new Array(objectById(child)));						}					}				}			}			return xmlNodes;		}				static function getSuperClass(o: Object): Object {			var n: String = getQualifiedClassName(o);			if(n == null)return(null);			return(getDefinitionByName(n));		}		public function introDone():void{			xmlArray.push(objectByName('FocusLevelsHeading'));			xmlArray.push(getChildren(xmlArray[0]));			for(var i1:Number = 0; i1<xmlArray[1].length; i1++){				xmlArray[1][i1].push(getChildren(xmlArray[1][i1][0]));				xmlArray[1][i1][1].push(new Array(objectByName('FocusActivityLevel-1')));				for(var i2:Number = 0; i2<xmlArray[1][i1][1].length; i2++){					areas.addItem({label:getAttribute(xmlArray[1][i1][1][i2][0], 'title', 'attribute'), data: i2});				}			}			processTags();		}				public function processTags(){			for each(var object in xmlData.object){				if(object.attribute('type') == 'TAG'){					tagArray.push(object);				}			}			this.addEventListener(Event.ENTER_FRAME, doProcessStep);		}				public function doProcessStep(e:Event):void{			statusField.text = 'Data is beeing processed (Areas:'+areaCount+' | Projects:'+projectCount+')';			if(!process){				process = true;				if(processStep == 0){					processXMLAreas();				}else if(processStep == 1){					processXMLProjects();				}else{					this.removeEventListener(Event.ENTER_FRAME, doProcessStep);					updateArea();					overallContainer.removeChild(statusField);					menu.visible = true;				}			}		}				public function processXMLAreas():void{			xmlArray[1][0][1][processArea].push(getChildren(xmlArray[1][0][1][processArea][0]));			processArea++;			areaCount++;						if(processArea >= xmlArray[1][0][1].length){				processArea = 0;				processStep++;			}						process = false;		}				public function processXMLProjects():void{			xmlArray[1][0][1][processArea][1][processProject].push(getChildren(xmlArray[1][0][1][processArea][1][processProject][0]));			projectCount++;			processProject++;						if(processProject >= xmlArray[1][0][1][processArea][1].length){				processProject = 0;				processArea++;				if(processArea >= xmlArray[1][0][1].length){					processStep++;				}else{					while((xmlArray[1][0][1][processArea][1][0] == null) && (processArea <= xmlArray[1][0][1].length)){						processArea++;					}				}			}						if(processArea >= xmlArray[1][0][1].length){				processStep++;			}						process = false;		}				public function areaChange(e:Event):void{			updateArea();		}				public function projectChange(e:Event):void{			updateProject();		}				public function getCurrentIds():Array{			var areaId:Number;			if(areas.selectedItem != null){				areaId = areas.selectedItem.data;			}else{				areaId = 0;			}						var projectId:Number;			if(projects.selectedItem != null){				projectId = projects.selectedItem.data;			}else{				projectId = 0;			}			return new Array(areaId, projectId);		}				public function updateProject():void{			var ids = getCurrentIds();			var areaId = ids[0];			var projectId = ids[1];			var tags:String = '';			var tag:String = '';			for(var i:Number = 0; i<xmlArray[1][0][1][areaId][1][projectId][1].length; i++){				tag = getAttribute(xmlArray[1][0][1][areaId][1][projectId][1][i][0], 'tags', 'relationship');				if(tag != null){					if(tag.length>=1){						if(tags != ''){							tags += ' ';						}						tags += tag;					}				}			}			var tagsArray:Array = tags.split(' ');			var cleanTags:Array = new Array();			var exists:Boolean;			for(var t1:Number = 0; t1<tagsArray.length; t1++){				exists = false;				for(var t2:Number = 0; t2<cleanTags.length; t2++){					if(cleanTags[t2]==tagsArray[t1]){						exists = true;					}				}				if(!exists){					cleanTags.push(tagsArray[t1]);				}			}			projectTags.removeAll();			selectedProjectTags.removeAll();			for(var t3:Number = 0; t3<cleanTags.length; t3++){				for(var t4:Number = 0; t4<tagArray.length; t4++){					if(tagArray[t4].attribute('id')==cleanTags[t3]){						projectTags.addItem({label:getAttribute(tagArray[t4], 'title', 'attribute'), data:tagArray[t4].attribute('id')});					}				}			}		}				public function projectTagRemoved(e:Event):void{			updateToDos();		}				public function projectTagAdded(e:Event):void{			updateToDos();		}				public function projectTagReordered(e:Event):void{			updateToDos();		}				public function updateToDos():void{					}				public function printButtonClick(e:MouseEvent):void{			var pj:PrintJob = new PrintJob();			var options:PrintJobOptions = new PrintJobOptions();            options.printAsBitmap = false;			pj.start();			printContainer.visible = true;			printContainer.rotation = 90;			printContainer.width = pj.pageWidth;			printContainer.scaleY = printContainer.scaleX;						if(printContainer.height > pj.pageHeight){				printContainer.height = pj.pageHeight;				printContainer.scaleX = printContainer.scaleY;			}						pj.addPage(printContainer, null , options);			pj.send();            pj = null;			printContainer.visible = false;		}				public function updateButtonClick(e:MouseEvent):void{			var ids = getCurrentIds();			var areaId = ids[0];			var projectId = ids[1];			startDate = Math.pow(9999,99999);			endDate = 0;			currentToDoArray = new Array();			var t_id;			var cDate:Number;			var t_array:Array;			var tag:String;			for(var i1:Number = 0; i1<selectedProjectTags.dataProvider.length; i1++){				t_id = selectedProjectTags.dataProvider.getItemAt(i1).data;				t_array = new Array({'object':selectedProjectTags.dataProvider.getItemAt(i1).label, 'date':0});				for(var i2:Number = 0; i2<xmlArray[1][0][1][areaId][1][projectId][1].length; i2++){					tag = getAttribute(xmlArray[1][0][1][areaId][1][projectId][1][i2][0], 'tags', 'relationship');					cDate = parseFloat(getAttribute(xmlArray[1][0][1][areaId][1][projectId][1][i2][0], 'datedue', 'attribute'));					if((tag.indexOf(t_id)>-1)&&(cDate>1)){						if(cDate<startDate){							startDate = cDate;						}						if(cDate>endDate){							endDate = cDate;						}						t_array.push({ 'object':xmlArray[1][0][1][areaId][1][projectId][1][i2][0], 'date':cDate });					}				}				t_array.sortOn('date', Array.NUMERIC);				currentToDoArray.push(t_array);			}			while(colorArray.length < currentToDoArray.length){				colorArray.push(0xCCCCCC);			}						endDate += 60*60*24*25;			startDate -= 60*60*24*50;			showToDos();		}				public function date_convert(date:Number):Date{			var nDate:Date = new Date();			var rDate:Number = ((date + (60*60*24*365*31) + (60*60*24)*8)*1000);			nDate.setTime(rDate);			return nDate;		}				public function formatDate(date:Number):String{			var nDate:Date = date_convert(date);			var returnDate:String = nDate.getFullYear().toString()+"-"+(nDate.getMonth()+1).toString()+"-"+nDate.getDate().toString();			return returnDate;		}				public function date_getMonth(date:Number):Number{			var nDate:Date = date_convert(date);			var returnDate:Number = nDate.getMonth()+1;			return returnDate;		}				public function date_getYear(date:Number):Number{			var nDate:Date = date_convert(date);			var returnDate:Number = nDate.getFullYear();			return returnDate;		}				public function date_getDay(date:Number):Number{			var nDate:Date = date_convert(date);			var returnDate:Number = nDate.getDate();			return returnDate;		}				public function date_getMonthLength(date:Number):Number{			var nDate:Date = date_convert(date);			var year:Number = nDate.getFullYear();			var month:Number = nDate.getMonth();			var day:Number = 1;			var testDate:Date = new Date(year,month,day);			while(testDate.getDate() == day){				day++;				testDate = new Date(year, month, day);			}			return (day-1);		}				public function dateToPosition(date:Number):Array{			var returnArray = new Array(0,0);			var cMonth:Number = date_getMonth(date);			var cYear:Number = date_getYear(date);			var cDay:Number = date_getDay(date);			var sYear:Number = date_getYear(startDate);			var sMonth:Number = date_getMonth(startDate)-1;									var monthCount = 0;			while((sYear != cYear)||(sMonth != cMonth)){				sMonth++;				if(sMonth == 13){					sMonth = 1;					sYear++;				}				monthCount++;			}									returnArray[0] = ((monthCount-1)*settings.monthWidth*zoom.value) + ((settings.monthWidth*zoom.value)/date_getMonthLength(date))*cDay;						return returnArray;		}				public function dateToX(date:Number):Number{			var returnArray = dateToPosition(date);			return returnArray[0];		}				public function dateToY(date:Number):Number{			var returnArray = dateToPosition(date);			return returnArray[1];		}				public function stdTextField():TextField{			var returnField:TextField = new TextField();			returnField.defaultTextFormat = stdTextFormat;			returnField.embedFonts = true;			returnField.antiAliasType = AntiAliasType.ADVANCED;			return returnField;		}				public function isDark(color:uint):Boolean{			var returnDark:Boolean = false;			var c:Color = new Color();			c.setTint(color, 1);			var brightness:Number = Math.sqrt(c.redOffset* c.redOffset * .241 + c.greenOffset * c.greenOffset * .691 + c.blueOffset * c.blueOffset * .068);			if(brightness<130){				returnDark = true;			}			return returnDark;		}				public function colorChanged(e:ColorPickerEvent):void{			var cId:Number = parseFloat(e.currentTarget.name);			colorArray[cId] = e.color;		}				public function showToDos():void{			buildToDos(toDoContainer, true);			buildToDos(printContainer, false);			var borderHolder:MovieClip = new MovieClip();			borderHolder.graphics.beginFill(0xffffff, 1);			borderHolder.graphics.drawRect(0,0,1,1);			borderHolder.graphics.endFill();			borderHolder.x = 0;			borderHolder.y = -50;			printContainer.addChild(borderHolder);		}				public function textByWidth(s:String, w:Number):String{			var t_field:TextField = stdTextField();			t_field.htmlText = s;			var returnString:String = s;			if((t_field.textWidth+5)>w){				var minus:Number = 0;				while((t_field.textWidth+10)>w){					returnString = s.substr(0, s.length-minus)+"...";					t_field.htmlText = returnString;					minus++;				}			}			return returnString;		}				public function buildToDos(target, showControls:Boolean):void{			var legend:MovieClip = new MovieClip();			var toDos:MovieClip = new MovieClip();			var toDoControls:MovieClip = new MovieClip();			toDoControls.name = "toDoControls";						var t_field:TextField;			var t_x:Number;						while(target.numChildren > 0){  				target.removeChildAt(0);			}			target.graphics.clear();						var s_x:Number = 0;			t_field = stdTextField();			t_field.width = 500;			for(var i1:Number = 0; i1<currentToDoArray.length; i1++){				t_field.text = currentToDoArray[i1][0].object;				if(t_field.textWidth>s_x){					s_x = t_field.textWidth;				}			}						var cYear:Number = date_getYear(startDate);			var cMonth:Number = date_getMonth(startDate);			var endYear:Number = date_getYear(endDate);			var endMonth:Number = date_getMonth(endDate);						var monthCount = 0;			while((cYear != endYear)||(cMonth != endMonth)){				t_field = stdTextField();				t_field.y = 0;				t_field.x = monthCount*settings.monthWidth*zoom.value + s_x + 30;				t_field.text = cYear+'\n'+monthArray[cMonth];				t_field.autoSize = TextFieldAutoSize.LEFT;				legend.addChild(t_field);				cMonth++;				if(cMonth == 13){					cMonth = 1;					cYear++;				}				monthCount++;			}						var cRow:Array;			var t_y = 40;			var toDoEnd:Number;			var minToDoStart:Number;			var toDoStart:Number;			var finalToDoStart:Number;			var added:Boolean;			var useRow:Number;			var end_x:Number;			var end_y:Number;			var start_x:Number;			var start_y:Number;			var tColor:uint;			var colorChange:ColorPicker;			for(i1 = 0; i1<currentToDoArray.length; i1++){				t_x = 30 + s_x;				t_field = stdTextField();				t_field.y = t_y;				t_field.x = 10;				t_field.text = currentToDoArray[i1][0].object;				t_field.width = t_field.textWidth+10;				legend.addChild(t_field);								colorChange = new ColorPicker();				colorChange.selectedColor = colorArray[i1];				colorChange.x = 10;				colorChange.y = t_y + 20;				colorChange.name = i1.toString();				colorChange.setSize(20,20);				colorChange.addEventListener(ColorPickerEvent.CHANGE, colorChanged);				toDoControls.addChild(colorChange);								cRow = new Array();				for(var i2:Number = 1; i2<currentToDoArray[i1].length; i2++){					t_field = stdTextField();					t_field.htmlText = getAttribute(currentToDoArray[i1][i2].object, 'title', 'attribute');					toDoEnd = currentToDoArray[i1][i2].date;										minToDoStart = currentToDoArray[i1][i2].date - (Math.ceil(settings.toDoWidth/((settings.monthWidth*zoom.value)/30))*24*60*60);					toDoStart =  currentToDoArray[i1][i2].date - (Math.ceil((t_field.textWidth+30)/((settings.monthWidth*zoom.value)/30))*24*60*60);					if(toDoStart>minToDoStart){						toDoStart = minToDoStart;					}										added = false;					for(var i3:Number = 0; i3<cRow.length; i3++){						if((cRow[i3]<=minToDoStart)&&(!added)){							if(cRow[i3]<=toDoStart){								finalToDoStart = toDoStart;							}else{								finalToDoStart = minToDoStart;							}							added = true;							useRow = i3;							cRow[i3] = toDoEnd;						}					}										if(!added){						cRow.push(toDoEnd);						useRow = (cRow.length-1);						finalToDoStart = toDoStart;					}										start_x = dateToX(finalToDoStart);					start_y = t_y + (useRow*50);					end_x = dateToX(toDoEnd);					end_y = t_y + (useRow*50);										tColor = 0x000000;					if(isDark(colorArray[i1])){						tColor = 0xffffff;					}										toDos.graphics.beginFill(colorArray[i1], 1);					toDos.graphics.drawRoundRect(start_x + s_x + 30+2, start_y+2, (end_x-start_x-4), 46, 2);					toDos.graphics.endFill();										t_field.width = end_x - start_x - 10;					t_field.text = textByWidth(getAttribute(currentToDoArray[i1][i2].object, 'title', 'attribute'), t_field.width)+"\n"+formatDate(currentToDoArray[i1][i2].date);										t_field.x = start_x + 5 + s_x + 30;					t_field.y = t_y + useRow*50 + 5;					t_field.textColor = tColor;					toDos.addChild(t_field);				}								t_y += cRow.length*50;				legend.graphics.lineStyle(1, 0xCCCCCC, 1);				legend.graphics.moveTo(0,t_y);				legend.graphics.lineTo((monthCount*settings.monthWidth*zoom.value + s_x + 30),t_y);			}						cYear = date_getYear(startDate);			cMonth = date_getMonth(startDate);			endYear = date_getYear(endDate);			endMonth = date_getMonth(endDate);						monthCount = 0;			legend.graphics.lineStyle(1,0xCCCCCC,1);			while((cYear != endYear)||(cMonth != endMonth)){				legend.graphics.moveTo(monthCount*settings.monthWidth*zoom.value + s_x + 30, 30);				legend.graphics.lineTo(monthCount*settings.monthWidth*zoom.value + s_x + 30, t_y);				cMonth++;				if(cMonth == 13){					cMonth = 1;					cYear++;				}				monthCount++;			}										printContainer.addChild(legend);			printContainer.addChild(toDos);						target.addChild(legend);			target.addChild(toDos);						if(showControls){				target.addChild(toDoControls);				toDoPane.update();			}		}				public function updateArea(){			var id:Number = areas.selectedItem.data;			projects.removeAll();			if(xmlArray[1][0][1][id][1][0][0] != null){				for(var i:Number = 0; i<xmlArray[1][0][1][id][1].length; i++){					projects.addItem({label:getAttribute(xmlArray[1][0][1][id][1][i][0], 'title', 'attribute'), data:i});				}			}			updateProject();		}				public function init():void{			var xmlLoader:URLLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, LoadXML);			xmlLoader.load(new URLRequest("database.xml"));		}				private function LoadXML(e:Event):void{			xmlData = new XML(e.target.data);			introDone();		}				function sizeChange(e:Event):void{			resizeContainers();		}				function resizeContainers(){			var nHeight:Number = stage.stageHeight;			var nWidth:Number = stage.stageWidth;						toDoPane.width = stage.stageWidth;			toDoPane.height = stage.stageHeight-220;		}			}	}